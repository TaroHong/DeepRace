import math

# 두 점 사이의 거리를 구하는 함수
def dist(point1, point2):
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5

# 최적의 핸들 각도와 현재 핸들 각도의 차이에 따라 다르게 보상
def reward_function(params):
    try:
        car_x = params['x']
        car_y = params['y']
        steering_angle = params['steering_angle']
        speed = params['speed']
        
        # 여러 개의 waypoint2와 optimal 값
        waypoints = [[0.68314, 2.80877],
  [0.69279, 2.69702],
  [0.70903, 2.58589],
  [0.73159, 2.47566],
  [0.7602, 2.36656],
  [0.79479, 2.25883],
  [0.83531, 2.15275],
  [0.88261, 2.04887],
  [0.93764, 1.94799],
  [1.00161, 1.8513],
  [1.07611, 1.7606],
  [1.16374, 1.67942],
  [1.26415, 1.6102],
  [1.37125, 1.54831],
  [1.48362, 1.49259],
  [1.60023, 1.44197],
  [1.72028, 1.3954],
  [1.84301, 1.35184],
  [1.96764, 1.31025],
  [2.09321, 1.26959],
  [2.22447, 1.22636],
  [2.35564, 1.18252],
  [2.48673, 1.13824],
  [2.61778, 1.09365],
  [2.74879, 1.04892],
  [2.87979, 1.00408],
  [3.01027, 0.95934],
  [3.13895, 0.91577],
  [3.2664, 0.87367],
  [3.39296, 0.83333],
  [3.51883, 0.79514],
  [3.64418, 0.75948],
  [3.7691, 0.72671],
  [3.89367, 0.69723],
  [4.01795, 0.67144],
  [4.14198, 0.64965],
  [4.26579, 0.63196],
  [4.3894, 0.6184],
  [4.51279, 0.60952],
  [4.63592, 0.60599],
  [4.75872, 0.60888],
  [4.881, 0.61999],
  [5.00251, 0.64035],
  [5.12312, 0.66869],
  [5.24277, 0.70412],
  [5.36141, 0.74593],
  [5.47892, 0.79385],
  [5.59522, 0.84772],
  [5.71016, 0.90737],
  [5.82363, 0.97267],
  [5.93542, 1.04369],
  [6.04546, 1.12002],
  [6.15358, 1.20159],
  [6.25965, 1.28812],
  [6.36357, 1.37931],
  [6.46525, 1.47484],
  [6.56458, 1.57441],
  [6.66149, 1.67772],
  [6.75589, 1.7845],
  [6.8477, 1.89447],
  [6.93684, 2.00737],
  [7.0232, 2.12296],
  [7.10669, 2.241],
  [7.18721, 2.36128],
  [7.26463, 2.48358],
  [7.33882, 2.60771],
  [7.40962, 2.73346],
  [7.47689, 2.86064],
  [7.54044, 2.98906],
  [7.60011, 3.11853],
  [7.65574, 3.24886],
  [7.70716, 3.37985],
  [7.75425, 3.51132],
  [7.79694, 3.64309],
  [7.83521, 3.77498],
  [7.86909, 3.90685],
  [7.89872, 4.03856],
  [7.92424, 4.16998],
  [7.94552, 4.30098],
  [7.96231, 4.43139],
  [7.97432, 4.56104],
  [7.98069, 4.6896],
  [7.98055, 4.81667],
  [7.97278, 4.94167],
  [7.95561, 5.06369],
  [7.92706, 5.18139],
  [7.88508, 5.293],
  [7.82726, 5.39584],
  [7.75035, 5.48484],
  [7.66003, 5.56084],
  [7.56, 5.62506],
  [7.45267, 5.67835],
  [7.34008, 5.722],
  [7.22354, 5.75678],
  [7.10404, 5.78331],
  [6.98237, 5.80218],
  [6.85917, 5.81395],
  [6.7349, 5.81895],
  [6.60993, 5.8172],
  [6.48465, 5.80933],
  [6.3593, 5.79538],
  [6.23415, 5.77545],
  [6.10944, 5.74962],
  [5.98536, 5.71797],
  [5.86211, 5.68059],
  [5.73988, 5.6376],
  [5.6188, 5.58915],
  [5.499, 5.53547],
  [5.38052, 5.47692],
  [5.2634, 5.4139],
  [5.14763, 5.34691],
  [5.03314, 5.27649],
  [4.91984, 5.20326],
  [4.8076, 5.1278],
  [4.69631, 5.05066],
  [4.58598, 4.97231],
  [4.47688, 4.89335],
  [4.36981, 4.81473],
  [4.26343, 4.73744],
  [4.15639, 4.66158],
  [4.04827, 4.58806],
  [3.93857, 4.51801],
  [3.82675, 4.45264],
  [3.71223, 4.39334],
  [3.59404, 4.34248],
  [3.473, 4.2984],
  [3.34967, 4.2599],
  [3.22449, 4.22594],
  [3.0978, 4.19579],
  [2.96986, 4.16891],
  [2.84091, 4.14481],
  [2.71118, 4.12305],
  [2.58092, 4.10316],
  [2.45031, 4.08473],
  [2.31951, 4.06733],
  [2.18861, 4.05062],
  [2.06042, 4.03461],
  [1.93273, 4.01776],
  [1.80603, 3.9992],
  [1.68086, 3.97805],
  [1.55779, 3.95335],
  [1.43763, 3.92386],
  [1.32124, 3.8883],
  [1.20978, 3.84516],
  [1.10467, 3.79291],
  [1.00783, 3.72983],
  [0.92249, 3.6538],
  [0.85266, 3.56436],
  [0.79694, 3.46607],
  [0.75354, 3.36207],
  [0.72117, 3.25435],
  [0.69881, 3.14428],
  [0.68557, 3.03287],
  [0.68057, 2.92086],
  [0.68314, 2.80877]
]  # waypoint2 리스트
        optimal = [[0.68314, 2.80877, 2.60441, 0.04305],
[0.69279, 2.69702, 2.6429, 0.04244],
[0.70903, 2.58589, 2.46221, 0.04561],
[0.73159, 2.47566, 2.27718, 0.04941],
[0.7602, 2.36656, 2.07926, 0.05425],
[0.79479, 2.25883, 1.82507, 0.06199],
[0.83531, 2.15275, 1.79224, 0.06336],
[0.88261, 2.04887, 1.79224, 0.06369],
[0.93764, 1.94799, 1.79224, 0.06411],
[1.00161, 1.8513, 1.79224, 0.06469],
[1.07611, 1.7606, 1.79224, 0.06549],
[1.16374, 1.67942, 1.79224, 0.06665],
[1.26415, 1.6102, 2.42848, 0.05022],
[1.37125, 1.54831, 2.73622, 0.04521],
[1.48362, 1.49259, 3.08061, 0.04071],
[1.60023, 1.44197, 3.5197, 0.03612],
[1.72028, 1.3954, 4.0, 0.03219],
[1.84301, 1.35184, 4.0, 0.03256],
[1.96764, 1.31025, 4.0, 0.03285],
[2.09321, 1.26959, 4.0, 0.033],
[2.22447, 1.22636, 4.0, 0.03455],
[2.35564, 1.18252, 4.0, 0.03457],
[2.48673, 1.13824, 4.0, 0.03459],
[2.61778, 1.09365, 4.0, 0.0346],
[2.74879, 1.04892, 4.0, 0.03461],
[2.87979, 1.00408, 4.0, 0.03461],
[3.01027, 0.95934, 4.0, 0.03448],
[3.13895, 0.91577, 4.0, 0.03397],
[3.2664, 0.87367, 4.0, 0.03355],
[3.39296, 0.83333, 3.96687, 0.03348],
[3.51883, 0.79514, 3.87097, 0.03398],
[3.64418, 0.75948, 3.82428, 0.03408],
[3.7691, 0.72671, 3.55448, 0.03633],
[3.89367, 0.69723, 3.30703, 0.03871],
[4.01795, 0.67144, 3.00061, 0.0423],
[4.14198, 0.64965, 2.64382, 0.04763],
[4.26579, 0.63196, 2.49774, 0.05007],
[4.3894, 0.6184, 2.49774, 0.04978],
[4.51279, 0.60952, 2.49774, 0.04953],
[4.63592, 0.60599, 2.49774, 0.04932],
[4.75872, 0.60888, 2.49774, 0.04918],
[4.881, 0.61999, 2.49774, 0.04916],
[5.00251, 0.64035, 2.70004, 0.04563],
[5.12312, 0.66869, 2.88392, 0.04296],
[5.24277, 0.70412, 3.06646, 0.04069],
[5.36141, 0.74593, 3.15804, 0.03983],
[5.47892, 0.79385, 3.23593, 0.03922],
[5.59522, 0.84772, 3.3107, 0.03871],
[5.71016, 0.90737, 3.37907, 0.03832],
[5.82363, 0.97267, 3.39311, 0.03858],
[5.93542, 1.04369, 3.54537, 0.03736],
[6.04546, 1.12002, 3.58945, 0.03731],
[6.15358, 1.20159, 3.70387, 0.03657],
[6.25965, 1.28812, 3.82571, 0.03578],
[6.36357, 1.37931, 3.9484, 0.03502],
[6.46525, 1.47484, 4.0, 0.03488],
[6.56458, 1.57441, 4.0, 0.03516],
[6.66149, 1.67772, 4.0, 0.03541],
[6.75589, 1.7845, 4.0, 0.03563],
[6.8477, 1.89447, 4.0, 0.03581],
[6.93684, 2.00737, 4.0, 0.03596],
[7.0232, 2.12296, 4.0, 0.03607],
[7.10669, 2.241, 4.0, 0.03615],
[7.18721, 2.36128, 4.0, 0.03619],
[7.26463, 2.48358, 4.0, 0.03619],
[7.33882, 2.60771, 4.0, 0.03615],
[7.40962, 2.73346, 4.0, 0.03608],
[7.47689, 2.86064, 4.0, 0.03597],
[7.54044, 2.98906, 4.0, 0.03582],
[7.60011, 3.11853, 4.0, 0.03564],
[7.65574, 3.24886, 4.0, 0.03542],
[7.70716, 3.37985, 4.0, 0.03518],
[7.75425, 3.51132, 4.0, 0.03491],
[7.79694, 3.64309, 3.91369, 0.03539],
[7.83521, 3.77498, 3.74201, 0.0367],
[7.86909, 3.90685, 3.39748, 0.04008],
[7.89872, 4.03856, 3.10747, 0.04344],
[7.92424, 4.16998, 2.8123, 0.0476],
[7.94552, 4.30098, 2.47091, 0.05371],
[7.96231, 4.43139, 2.18169, 0.06027],
[7.97432, 4.56104, 1.94215, 0.06704],
[7.98069, 4.6896, 1.72479, 0.07463],
[7.98055, 4.81667, 1.5, 0.08471],
[7.97278, 4.94167, 1.5, 0.0835],
[7.95561, 5.06369, 1.5, 0.08214],
[7.92706, 5.18139, 1.5, 0.08074],
[7.88508, 5.293, 1.5, 0.07949],
[7.82726, 5.39584, 1.5, 0.07866],
[7.75035, 5.48484, 1.68477, 0.06982],
[7.66003, 5.56084, 1.87632, 0.06291],
[7.56, 5.62506, 2.03727, 0.05834],
[7.45267, 5.67835, 2.24828, 0.0533],
[7.34008, 5.722, 2.40724, 0.05016],
[7.22354, 5.75678, 2.55468, 0.04761],
[7.10404, 5.78331, 2.69251, 0.04546],
[6.98237, 5.80218, 2.83874, 0.04337],
[6.85917, 5.81395, 2.93436, 0.04218],
[6.7349, 5.81895, 2.96579, 0.04194],
[6.60993, 5.8172, 3.13042, 0.03992],
[6.48465, 5.80933, 3.16386, 0.03968],
[6.3593, 5.79538, 3.20375, 0.03937],
[6.23415, 5.77545, 3.2346, 0.03918],
[6.10944, 5.74962, 3.27621, 0.03888],
[5.98536, 5.71797, 3.31334, 0.03865],
[5.86211, 5.68059, 3.3583, 0.03835],
[5.73988, 5.6376, 3.4205, 0.03788],
[5.6188, 5.58915, 3.51324, 0.03712],
[5.499, 5.53547, 3.64582, 0.03601],
[5.38052, 5.47692, 3.8249, 0.03455],
[5.2634, 5.4139, 4.0, 0.03325],
[5.14763, 5.34691, 4.0, 0.03344],
[5.03314, 5.27649, 4.0, 0.0336],
[4.91984, 5.20326, 4.0, 0.03373],
[4.8076, 5.1278, 4.0, 0.03381],
[4.69631, 5.05066, 4.0, 0.03385],
[4.58598, 4.97231, 4.0, 0.03383],
[4.47688, 4.89335, 3.55134, 0.03792],
[4.36981, 4.81473, 3.10488, 0.04278],
[4.26343, 4.73744, 2.62703, 0.05005],
[4.15639, 4.66158, 2.62703, 0.04994],
[4.04827, 4.58806, 2.62703, 0.04977],
[3.93857, 4.51801, 2.62703, 0.04955],
[3.82675, 4.45264, 2.62703, 0.0493],
[3.71223, 4.39334, 2.62703, 0.04909],
[3.59404, 4.34248, 2.93227, 0.04388],
[3.473, 4.2984, 3.2523, 0.03961],
[3.34967, 4.2599, 3.62391, 0.03565],
[3.22449, 4.22594, 3.9783, 0.0326],
[3.0978, 4.19579, 4.0, 0.03256],
[2.96986, 4.16891, 4.0, 0.03268],
[2.84091, 4.14481, 4.0, 0.0328],
[2.71118, 4.12305, 4.0, 0.03288],
[2.58092, 4.10316, 4.0, 0.03294],
[2.45031, 4.08473, 4.0, 0.03297],
[2.31951, 4.06733, 3.96777, 0.03326],
[2.18861, 4.05062, 3.34117, 0.0395],
[2.06042, 4.03461, 2.89981, 0.04455],
[1.93273, 4.01776, 2.51551, 0.0512],
[1.80603, 3.9992, 2.21829, 0.05772],
[1.68086, 3.97805, 1.95898, 0.0648],
[1.55779, 3.95335, 1.70957, 0.07342],
[1.43763, 3.92386, 1.55495, 0.07957],
[1.32124, 3.8883, 1.55495, 0.07827],
[1.20978, 3.84516, 1.55495, 0.07686],
[1.10467, 3.79291, 1.55495, 0.07549],
[1.00783, 3.72983, 1.55495, 0.07433],
[0.92249, 3.6538, 1.55495, 0.07351],
[0.85266, 3.56436, 1.71525, 0.06615],
[0.79694, 3.46607, 1.89409, 0.05965],
[0.75354, 3.36207, 2.03869, 0.05528],
[0.72117, 3.25435, 2.16635, 0.05192],
[0.69881, 3.14428, 2.28751, 0.0491],
[0.68557, 3.03287, 2.41031, 0.04655],
[0.68057, 2.92086, 2.51896, 0.04451]]
        
        # waypoint2와 현재 차량의 거리 계산
        distances_to_waypoints = [dist([car_x, car_y], waypoint) for waypoint in waypoints]
        
        # 가장 가까운 waypoint와의 거리 선택
        distance_to_closest_waypoint = min(distances_to_waypoints)
        
        # 최적 목표점과 현재 차량의 거리 계산
        distance_to_optimal = dist([car_x, car_y], optimal[:2])
        
        # 최적 속도와 현재 속도 차이 계산
        speed_error = (speed - optimal[2]) / optimal[2]  # 비율로 변환
        
        # 보상 계산
        reward = 1.0 - (distance_to_closest_waypoint / 10.0)  # 가장 가까운 waypoint와의 거리 기반 보상
        reward += 1.0 - abs(speed_error)  # 최적 속도와의 차이에 대한 보상
        
        # steering angle 오차 계산
        best_steering_angle = optimal[3]  # optimal에서 최적의 핸들 각도 가져오기
        error = (steering_angle - best_steering_angle) / 60.0
        steering_score = 1.0 - abs(error)
        
        # 최종 보상 계산
        total_reward = reward * steering_score
        return float(max(total_reward, 0.01))
    
    except KeyError as e:
        print(f"Missing parameter: {e}")
        return 0.01  # 기본 보상 반환
    except Exception as e:
        print(f"An error occurred: {e}")
        return 0.01  # 기본 보상 반환
